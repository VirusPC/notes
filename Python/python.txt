一．Python基础
1.数据类型和变量
    ·整数
        ·Python可以处理任意大小的整数
    ·浮点数
    ·字符串
        · \ 为转义字符
        ·三个双引号或三个单引号中的回车会被当做\n,可用来显示多行内容
        ·在引号前加r如print(r"\n'''"),引号内的内容被当做纯字符串,加u则为unicode字符串
    ·布尔值
        ·值:True、False
        ·运算符:or、and、not  相当于 Java中的 &&、||、！
    ·空值
        ·None
    ·可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
    ·除法运算
        ·/为除号，得到浮点数
        ·//为地板除，结果向下取整
        ·%取余
    ·定义变量机制类似JavaScript省略var

2.字符串和编码
    ·编码类型:
        ·最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号,这个编
         码表被称为ASCII编码。
        ·要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，
         所以，中国制定了GB2312编码，用来把中文编进去。
        ·UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母
         被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
    ·计算机系统通用的字符编码工作方式：
        ·在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转
         换为UTF-8编码。
        ·用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完
         成后，保存的时候再把Unicode转换为UTF-8保存到文件：
        ·浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。
    ·Python的字符串
        ·在最新的Python 3版本中，字符串是以Unicode编码的。
        ·对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码
         转换为对应的字符：
            ·ord('A') == 65
            ·chr(66) == 'B'
        ·对bytes类型的数据用带b前缀的单引号或双引号表示：
            ·x = b'ABC'
            ·要注意区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但
             bytes的每个字符都只占用一个字节。
        ·以Unicode表示的str通过encode()方法可以编码为指定的bytes：
            ·'ABC'.encode('ascii') == b'ABC'
            ·'中文'.encode('utf-8') == b'\xe4\xb8\xad\xe6\x96\x87'
            ·'中文'.encode('ascii') #error
        ·如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为
         str，就需要用decode()方法：
            ·b'ABC'.decode('ascii') == 'ABC'
            ·b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8') == '中文'
            ·如果bytes中只有一小部分无效的字节,可以传入errors='ignore'忽略错误的字节
        ·要计算str包含多少个字符，可以用len()函数：
            ·len(b'ABC') == 3
            ·len(b'\xe4\xb8\xad\xe6\x96\x87') == 6
            ·len('中文'.encode('utf-8')) == 6
        ·当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上：
            ·#!/usr/bin/env python3
             # -*- coding: utf-8 -*-
            ·第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows
             系统会忽略这个注释；
            ·第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码
        ·使用 % 来格式化字符串
            ·>>>'Hi, %s, you have $%d.' % ('Michael', 1000000)
                'Hi, Michael, you have $1000000.'
            ·>>>print('%02d-%2d' % (3, 1))
                03- 1
            ·%s永远起作用，它会把任何数据类型转换为字符串：
        ·另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换
         字符串内的占位符{0}、{1}……
            ·>>>'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
                'Hello, 小明, 成绩提升了 17.1%'

3.使用list和tuple
    ·list
        ·>>> classmates = ['Michael', 'Bob', 'Tracy']
         >>> classmates
         ['Michael', 'Bob', 'Tracy']
        ·要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素
        ·把元素插入到指定的位置
            ·classmates.insert(1, 'Jack')
        ·于在列表末尾添加新的对象。
            ·list.append('Nicholas')
        ·删除list末尾的元素
            ·classmates.pop()
        ·删除指定位置的元素
            ·classmates.pop(1)
        ·要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
            ·classmates[1] = 'Sarah'
        ·list里面的元素的数据类型可以不同
    ·tuple
        ·另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能
         修改，代码更安全。
        ·>>> classmates = ('Michael', 'Bob', 'Tracy')
        ·要定义一个只有1个元素的tuple，如果你这么定义
         >>> t = (1)
         >>> t
         1
         定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公
         式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算
         ，计算结果自然是1。
        ·Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义
         上的括号。
        ·“可变的”tuple：
            ·>>> t = ('a', 'b', ['A', 'B'])
             >>> t[2][0] = 'X'
             >>> t[2][1] = 'Y'
             >>> t
             ('a', 'b', ['X', 'Y'])

4.条件判断
    ·if age >= 18:
         print('adult')
     elif age >= 6:
         print('teenager')
     else:
         print('kid')
    ·如果if语句判断是True，就把缩进的print语句执行了，否则，什么也不做。
    ·if判断条件还可以简写，比如写：
        if x:
            print('True')
     只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。
    ·input
        ·input()返回的数据类型是str，可用int()或float()来转换为数字

5.循环
    ·for循环
        ·names = ['Michael', 'Bob', 'Tracy']
         for name in names:
             print(name)
        ·for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。
        ·Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为
         list。比如range(5)生成的序列是从0开始小于5的整数：
            list(range(5))
            [0, 1, 2, 3, 4]
        ·计算0~100之和
            sum = 0
            for x in range(101):
            sum = sum + x
            print(sum)
    ·while循环
        ·计算100以内所有奇数之和
         sum = 0
         n = 99
         while n > 0:
             sum = sum + n
             n = n - 2
         print(sum)
    ·break 用法同C语言、Java等
    ·continue 用法同C语言，Java等

6.使用dict和set
    ·dict
        ·Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使
         用键-值（key-value）存储，具有极快的查找速度。
        ·>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
         >>> d['Michael']
         95
        ·把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：
         d['Adam'] = 67
        ·由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面
         的值冲掉
        ·如果key不存在，dict就会报错要避免key不存在的错误，有两种办法
            ·一是通过in判断key是否存在。
                >>> 'Thomas' in d
                False
            ·二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的
             value
                d.get('Thomas')
                >>> d.get('Thomas', -1)
                -1
            ·dict内部存放的顺序和key放入的顺序是没有关系的。
        ·和list比较，dict有以下几个特点：
            ·dict查找和插入的速度极快，不会随着key的增加而变慢；list查找和插入的时间
             随着元素的增加而增加；
            ·dict需要占用大量的内存，内存浪费多；list相反
    ·set
        ·set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在
         set中，没有重复的key。
        ·要创建一个set，需要提供一个list作为输入集合
            >>> s = set([1, 2, 3])
            >>> s
            {1, 2, 3}
        ·通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
        ·通过remove(key)方法可以删除元素
        ·set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上
         的交集、并集等操作
            >>> s1 = set([1, 2, 3])
            >>> s2 = set([2, 3, 4])
            >>> s1 & s2
            {2, 3}
            >>> s1 | s2
            {1, 2, 3, 4}
    ·再议不可变对象
        ·对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：
            >>> a = ['c', 'b', 'a']
            >>> a.sort()
            >>> a
            ['a', 'b', 'c']
        ·而对于不可变对象，比如str，虽然字符串有个replace()方法，也确实变出了'Abc'，
         但变量a最后仍是'abc'。对于不变对象来说，调用对象自身的任意方法，也不会改变该
         对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本
         身永远是不可变的。
            >>> a = 'abc'
            >>> b = a.replace('a', 'A')
            >>> b
            'Abc'
            >>> a
            'abc'


二. 函数
1.调用函数
    ·abs(n)，求n的绝对值，同Java
    ·max(n1, n2 ...),接收任意多个参数，并返回最大的那个,Java固定接收两个参数
    ·min(n1, n2 ...),接收任意多个参数，并返回最小的那个,Java固定接收两个参数
    ·数据类型转换，可传入多种类型的参数
        ·int()
        ·float()
        ·str()
        ·bool()
        ·hex()
    ·函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，
     相当于给这个函数起了一个“别名”：
        >>> a = abs # 变量a指向abs函数
        >>> a(-1) # 所以也可以通过a调用abs函数
        1

2.定义函数
    ·在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:
     ，然后，在缩进块中编写函数体，函数的返回值用return语句返回。
        def my_abs(x):
            if x >= 0:
             return x
            else:
             return -x
        print(my_abs(-99))
    ·在Python交互环境中定义函数时，注意Python会出现...的提示。函数定义结束后需要按两次
     回车重新回到>>>提示符下
    ·如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目
     录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意
     abstest是文件名（不含.py扩展名）
        >>> from abstest import my_abs
        >>> my_abs(-9)
        9
    ·如果想定义一个什么事也不做的空函数，可以用pass语句：
        ·def nop():
             pass
        ·if age >= 18:
             pass
    ·对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数
     isinstance()实现
        ·参数类型做检查，只允许整数和浮点数类型的参数
            def my_abs(x):
            if not isinstance(x, (int, float)):
                raise TypeError('bad operand type')
            if x >= 0:
                return x
            else:
                return -x
    ·返回多个值
        ·   import math

            def move(x, y, step, angle=0):
                nx = x + step * math.cos(angle)
                ny = y - step * math.sin(angle)
                return nx, ny

            x, y = move(100, 100, 60, math.pi / 6)
            print(x, y)
        ·返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以
         同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回
         一个tuple，但写起来更方便。

3.函数的参数
    ·默认参数
        ·必选参数在前，默认参数在后
        ·def power(x, n=2):
         s = 1
         while n > 0:
             n = n - 1
             s = s * x
         return s
        ·调用power(5)时，相当于调用power(5, 2)
        · 定义默认参数要牢记一点：默认参数必须指向不变对象！
            ·def add_end(L=[]):
                 L.append('END')
                 return L
            ·>>> add_end()
             ['END']
             >>> add_end()
             ['END', 'END']
            ·Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L
             也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用
             时，默认参数的内容就变了，不再是函数定义时的[]了。
    ·可变参数
        ·定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数
         内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函
         数时，可以传入任意个参数，包括0个参数。
            ·def calc(*numbers):
             sum = 0
             for n in numbers:
                 sum = sum + n * n
             return sum
            ·>>> calc(1, 2)
             5
             >>> calc()
             0
        ·Python允许在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去
            ·>>> nums = [1, 2, 3]
             >>> calc(*nums)
             14
    ·关键字参数
        ·可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个
         tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数
         内部自动组装为一个dict。
